server {
  listen 443 ssl;
  listen [::]:443 ssl;
  http2 on;
  server_name your-domain.com; # If you want to bind multiple domain names, you can separate them with spaces. For example: your-domain-a.com your-domain-b.net;
  root /srv/is-bio/public; # I assume your app is located at this location

  ssl_certificate "/etc/nginx/ssl_key_cert/cert.pem";
  ssl_certificate_key "/etc/nginx/ssl_key_cert/key.pem";
  ssl_session_cache shared:SSL:10m;
  ssl_session_timeout  10m;
  ssl_prefer_server_ciphers on;

  location ^~ /assets/ {
    try_files $uri $uri/ =404;
    expires max;
    add_header Cache-Control public;
  }

  location ^~ /.well-known/ {
    try_files $uri $uri/ =404;
  }

  location / {
    proxy_pass http://blogup; # Should not starts with 'https://' since puma only understand http requests!
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
  }

  gzip on;
  gzip_types      text/plain text/css text/javascript application/javascript;
  gzip_min_length 3000;
}

# Redirect www.your-domain.com to your-domain.com.
# This can also be done by creating rules in Cloudflare.
# Put these lines to the top of the file if you want to use them.
# server {
#   listen 80;
#   listen [::]:80;
#   listen 443 ssl;
#   listen [::]:443 ssl;
#
#   server_name www.your-domain.com;
#
#   ssl_certificate "/etc/nginx/ssl_key_cert/cert.pem";
#   ssl_certificate_key "/etc/nginx/ssl_key_cert/key.pem";
#
#   return 301 $scheme://your-domain.com$request_uri;
# }

# Redirect "http://..." to "https://...."
# When your TLS (https) is not ready, you can comment this section out to use http.
# server {
#   listen 80;
#   listen [::]:80;
#   server_name your-domain.com;
#
#   location / {
#       return 301 https://your-domain.com$request_uri;
#   }
# }
